version: '3.8'

services:
  # API Gateway - Central entry point
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GATEWAY_PORT=8080
      - ENVIRONMENT=development
      - ENABLE_CORS=true
      - ENABLE_RATE_LIMIT=true
      - ENABLE_AUTH=false
      - DATA_SERVICE_URL=http://data-service:8081
      - WORKER_SERVICE_URL=http://worker-service:8082
      - PACKAGING_SERVICE_URL=http://packaging-service:8083
      - ORCHESTRATOR_SERVICE_URL=http://orchestrator-service:8084
      - LLM_SERVICE_URL=http://llm-service:8085
      - AGENT_SERVICE_URL=http://agent-service:8086
      - VALIDATION_SERVICE_URL=http://validation-service:8087
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - data-service
      - worker-service
      - packaging-service
      - orchestrator-service
      - llm-service
      - agent-service
      - validation-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - qlp-network

  # Data Service - Intent and data management
  data-service:
    build:
      context: .
      dockerfile: services/data-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgres://qlp_user:qlp_pass@postgres:5432/qlp_db?sslmode=disable
      - VECTOR_DB_URL=http://qdrant:6333
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - qlp-network

  # Worker Runtime Service - Runtime operations
  worker-service:
    build:
      context: .
      dockerfile: services/worker-runtime-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - LLM_SERVICE_URL=http://llm-service:8085
      - VALIDATION_SERVICE_URL=http://validation-service:8087
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - llm-service
      - validation-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - qlp-network

  # Packaging Service - Capsule and quantum drops
  packaging-service:
    build:
      context: .
      dockerfile: services/packaging-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - OUTPUT_DIR=/app/output
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    volumes:
      - packaging-output:/app/output
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - qlp-network

  # Orchestrator Service - Workflow orchestration
  orchestrator-service:
    build:
      context: .
      dockerfile: services/orchestrator-service/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DATA_SERVICE_URL=http://data-service:8081
      - WORKER_SERVICE_URL=http://worker-service:8082
      - PACKAGING_SERVICE_URL=http://packaging-service:8083
      - LLM_SERVICE_URL=http://llm-service:8085
      - AGENT_SERVICE_URL=http://agent-service:8086
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - data-service
      - worker-service
      - packaging-service
      - llm-service
      - agent-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - qlp-network

  # LLM Service - AI completion and embeddings
  llm-service:
    build:
      context: .
      dockerfile: services/llm-service/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DEFAULT_PROVIDER=mock
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - OLLAMA_ENDPOINT=http://ollama:11434
      - DATABASE_URL=postgres://qlp_user:qlp_pass@postgres:5432/qlp_db?sslmode=disable
      - VECTOR_DB_URL=http://qdrant:6333
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - qlp-network

  # Agent Service - Dynamic agent management
  agent-service:
    build:
      context: .
      dockerfile: services/agent-service/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - PORT=8086
      - LLM_SERVICE_URL=http://llm-service:8085
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - llm-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - qlp-network

  # Validation Service - Quality assurance
  validation-service:
    build:
      context: .
      dockerfile: services/validation-service/Dockerfile
    ports:
      - "8087:8087"
    environment:
      - PORT=8087
      - LLM_SERVICE_URL=http://llm-service:8085
      - LOG_LEVEL=info
      - LOG_FORMAT=console
    depends_on:
      - llm-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - qlp-network

  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=qlp_db
      - POSTGRES_USER=qlp_user
      - POSTGRES_PASSWORD=qlp_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./internal/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qlp_user -d qlp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qlp-network

  # Vector Database (Qdrant for advanced vector operations)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - qlp-network
    profiles:
      - vector

  # Ollama (optional - for local LLM testing)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - qlp-network
    profiles:
      - ollama

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qlp-network
    profiles:
      - cache

networks:
  qlp-network:
    driver: bridge

volumes:
  postgres-data:
  qdrant-data:
  ollama-data:
  redis-data:
  packaging-output: